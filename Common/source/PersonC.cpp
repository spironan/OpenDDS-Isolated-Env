// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.21
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:372


#include "PersonC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "PersonC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// C:\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_typecode\struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Identity_Person[] =
      {
        { "name", &CORBA::_tc_string },
        { "dob", &CORBA::_tc_string },
        { "uid", &CORBA::_tc_long },
        { "country", &CORBA::_tc_string },
        { "areaCode", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Identity_Person (
  ::CORBA::tk_struct,
  "IDL:Identity/Person:1.0",
  "Person",
  _tao_fields_Identity_Person,
  5);


namespace Identity
{
  ::CORBA::TypeCode_ptr const _tc_Person =
    &_tao_tc_Identity_Person;
}


// TAO_IDL - Generated from
// C:\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_structure\structure_cs.cpp:55

void
Identity::Person::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Person *_tao_tmp_pointer =
    static_cast<Person *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// C:\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_structure\any_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Identity::Person &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Identity::Person>::insert_copy (
    _tao_any,
    ::Identity::Person::_tao_any_destructor,
    Identity::_tc_Person,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Identity::Person *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Identity::Person>::insert (
    _tao_any,
    ::Identity::Person::_tao_any_destructor,
    Identity::_tc_Person,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Identity::Person *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Identity::Person>::extract (
    _tao_any,
    ::Identity::Person::_tao_any_destructor,
    Identity::_tc_Person,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// C:\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_structure\cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Identity::Person &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.dob.in ()) &&
    (strm << _tao_aggregate.uid) &&
    (strm << _tao_aggregate.country.in ()) &&
    (strm << _tao_aggregate.areaCode);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Identity::Person &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.dob.out ()) &&
    (strm >> _tao_aggregate.uid) &&
    (strm >> _tao_aggregate.country.out ()) &&
    (strm >> _tao_aggregate.areaCode);
}

TAO_END_VERSIONED_NAMESPACE_DECL



